<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter
	id="tcap">

	<title>TCAP</title>
	<para>
		The Transaction Capabilities Application Part (TCAP) is defined in ITU-T Recommendations Q.771-Q.775.
		TCAP allows services at network nodes to communicate with each other using an agreed-upon set of data elements.
		The primary purpose of TCAP is to facilitate multiple concurrent dialogs between the same sub-systems on the same machines, 
		using Transaction IDs to differentiate these, similar to the way TCP ports facilitate multiplexing connections between 
		the same IP addresses on the Internet.
	</para>
	<section>
		<title>&THIS.PLATFORM; &THIS.APPLICATION; TCAP Usage</title>
		<para>
			The <classname>org.restcomm.protocols.ss7.tcap.api.TCAPStack</classname> interface defines the methods required to represent the TCAP
			Protocol Stack. TCAPStack exposes <classname>org.restcomm.protocols.ss7.tcap.api.TCAPProvider</classname> that interacts directly
			with the TCAPStack. TCAPProvider defines methods that will be used by TCAP User Part to create new 
			<classname>org.restcomm.protocols.ss7.tcap.api.tc.dialog.Dialog</classname> to be sent across the network.
			TCAP User Part also allows to register<classname>org.restcomm.protocols.ss7.tcap.api.TCListener</classname> to listen for TCAP messages.
		</para>
		<para>
			TCAPProvider also exposes <classname>org.restcomm.protocols.ss7.tcap.api.DialogPrimitiveFactory</classname> to create dialog primitives 
			and <classname>org.restcomm.protocols.ss7.tcap.api.ComponentPrimitiveFactory</classname> to create components. 
			Components are a means of invoking an operation at a remote node.
		</para>
		
		<para>
			The UML Class Diagram is depicted in the figure below:
		</para>
		
	
		<mediaobject
			id="tcap_classdia">
			<imageobject>
				<imagedata
					width="300px"
					align="center"
					fileref="images/TCAPClassDiagram.png"
					format="PNG" />
			</imageobject>
			<caption>
				<para>&THIS.PLATFORM; &THIS.APPLICATION; TCAP Class Diagram
				</para>
			</caption>
		</mediaobject>	
		
		<para>
			The <classname>org.restcomm.protocols.ss7.tcap.TCAPStackImpl</classname> is a concrete implementation of <classname>TCAPStack</classname>. 
			The TCAP User Part gets access to <classname>TCAPProvider</classname> by doing JNDI lookup as explained in the <xref linkend="design_overview_ss7_service"/>.					
		</para>		
		
		<programlisting
			language="Java"
			role="JAVA"><![CDATA[	
		InitialContext ctx = new InitialContext();
		try {
			String providerJndiName = "java:/restcomm/ss7/tcap";
			this.tcapProvider = ((TCAPProvider) ctx.lookup(providerJndiName));
		} finally {
			ctx.close();
		}
	
			]]>
		</programlisting>		
		
		
		<para>The TCAP User Part should register the concrete implementation of 
			<classname>TCListener</classname> with <classname>TCAPProvider</classname> to listen for incoming TCAP messages.
		</para>
		
		<programlisting
			language="Java"
			role="JAVA"><![CDATA[
	public class ClientTest implements TCListener{
			.....		
	        tcapProvider.addTCListener(this);
	        ....
	}        		
			]]>
		</programlisting>		
		
	<para>TCAP User Part leverages <classname>TCAPProvider</classname> to create a new Dialog. The components between the nodes
		are exchanged within this Dialog.
	</para>
	
	<programlisting
		language="Java"
		role="JAVA"><![CDATA[
		SccpAddress localAddress = new SccpAddress(RoutingIndicator.ROUTING_BASED_ON_DPC_AND_SSN, 1, null, 8);
		SccpAddress remoteAddress = new SccpAddress(RoutingIndicator.ROUTING_BASED_ON_DPC_AND_SSN, 2, null, 8);
		clientDialog = this.tcapProvider.getNewDialog(localAddress, remoteAddress);   		
		]]>
	</programlisting>		
	
	<para>
		The TCAP User Part leverages <classname>ComponentPrimitiveFactory</classname> to create new components. These components are sent using the dialog.
	</para>	
	
	<para>
		Below is a list of common scenarios using the TCAP stack :
	</para>	
	  <itemizedlist>
		<listitem>
			<para>Creating a TCAP Dialog by invoking the methods <literal>TCAPProvider.getNewDialog()</literal> or <literal>getNewUnstructuredDialog()</literal></para>
		</listitem>
		<listitem>
			<para>Adding components into a Dialog for sending by <literal>Dialog.sendComponent();</literal></para>
		</listitem>			
		<listitem>
			<para>Sending a TCAP message TC-UNI, TC-BEGIN, TC-CONTINUE, TC-END or TC-ABORT via <literal>Dialog.send()</literal> methods.</para>
		</listitem>		
		<listitem>
			<para>Waiting for responses from a peer</para>
		</listitem>	
		<listitem>
			<para>When the TCAP stack receives a message from a peer, events like <literal>TCListener.onTCUni()</literal>, <literal>onTCBegin()</literal>, <literal>onTCContinue()</literal>, <literal>onTCEnd()</literal>, <literal>onTCUserAbort()</literal>, <literal>onTCPAbort()</literal> will be invoked.</para>
		</listitem>		
		<listitem>
			<para>After an Invoke component is received, a TCAP-User should process it and do one of the below:</para>
			 <itemizedlist>
			 	<listitem>
			 		<para>
			 			send a response (ReturnResult, ReturnResulLast components) or 
			 		</para>
			 	</listitem>
			 	<listitem>
			 		<para>
			 			send an error (ReturnError or Reject components) or
			 		</para>
			 	</listitem>	
			 	<listitem>
			 		<para>
			 			invoke Dialog.processInvokeWithoutAnswer() method if TCAP-Users will not answer to the Invoke.
			 		</para>
			 	</listitem>			 			 	
			 </itemizedlist>
		</listitem>						
	</itemizedlist>	
	
	<programlisting
		language="Java"
		role="JAVA"><![CDATA[
		//create some INVOKE
        Invoke invoke = cpFactory.createTCInvokeRequest();
        invoke.setInvokeId(this.clientDialog.getNewInvokeId());
        OperationCode oc = cpFactory.createOperationCode();
        oc.setLocalOperationCode(12L);
        invoke.setOperationCode(oc);
        //no parameter
        this.clientDialog.sendComponent(invoke); 		
		]]>
	</programlisting>
		
	</section>
	
	
	<section>
		<title>&THIS.PLATFORM; &THIS.APPLICATION; TCAP User Part Example</title>
		<para>Below is a TCAP User Part example. This example creates a dialog and exchanges messages within a structured dialog. Refer to source for function calls.
		</para>
	<programlisting
		language="Java"
		role="JAVA"><![CDATA[	
		
package org.restcomm.protocols.ss7.tcap;

import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.restcomm.protocols.ss7.indicator.RoutingIndicator;
import org.restcomm.protocols.ss7.sccp.parameter.SccpAddress;
import org.restcomm.protocols.ss7.tcap.api.ComponentPrimitiveFactory;
import org.restcomm.protocols.ss7.tcap.api.TCAPException;
import org.restcomm.protocols.ss7.tcap.api.TCAPProvider;
import org.restcomm.protocols.ss7.tcap.api.TCAPSendException;
import org.restcomm.protocols.ss7.tcap.api.TCListener;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.Dialog;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TCBeginIndication;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TCBeginRequest;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TCContinueIndication;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TCEndIndication;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TCEndRequest;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TCNoticeIndication;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TCPAbortIndication;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TCUniIndication;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TCUserAbortIndication;
import org.restcomm.protocols.ss7.tcap.api.tc.dialog.events.TerminationType;
import org.restcomm.protocols.ss7.tcap.asn.ApplicationContextName;
import org.restcomm.protocols.ss7.tcap.asn.comp.Invoke;
import org.restcomm.protocols.ss7.tcap.asn.comp.OperationCode;

/**
 * Simple example demonstrates how to use TCAP Stack
 * 
 * @author Amit Bhayani
 * 
 */
public class ClientTest implements TCListener {
	// encoded Application Context Name
	public static final long[] _ACN_ = new long[] { 0, 4, 0, 0, 1, 0, 19, 2 };
	private TCAPProvider tcapProvider;
	private Dialog clientDialog;

	ClientTest() throws NamingException {

		InitialContext ctx = new InitialContext();
		try {
			String providerJndiName = "java:/restcomm/ss7/tcap";
			this.tcapProvider = ((TCAPProvider) ctx.lookup(providerJndiName));
		} finally {
			ctx.close();
		}

		this.tcapProvider.addTCListener(this);
	}

	public void sendInvoke() throws TCAPException, TCAPSendException {
		SccpAddress localAddress = new SccpAddress(RoutingIndicator.ROUTING_BASED_ON_DPC_AND_SSN, 1, null, 8);
		SccpAddress remoteAddress = new SccpAddress(RoutingIndicator.ROUTING_BASED_ON_DPC_AND_SSN, 2, null, 8);

		clientDialog = this.tcapProvider.getNewDialog(localAddress, remoteAddress);
		ComponentPrimitiveFactory cpFactory = this.tcapProvider.getComponentPrimitiveFactory();

		// create some INVOKE
		Invoke invoke = cpFactory.createTCInvokeRequest();
		invoke.setInvokeId(this.clientDialog.getNewInvokeId());
		OperationCode oc = cpFactory.createOperationCode();
		oc.setLocalOperationCode(12L);
		invoke.setOperationCode(oc);
		// no parameter
		this.clientDialog.sendComponent(invoke);
		ApplicationContextName acn = this.tcapProvider.getDialogPrimitiveFactory().createApplicationContextName(_ACN_);
		// UI is optional!
		TCBeginRequest tcbr = this.tcapProvider.getDialogPrimitiveFactory().createBegin(this.clientDialog);
		tcbr.setApplicationContextName(acn);
		this.clientDialog.send(tcbr);
	}

	public void onDialogReleased(Dialog d) {
	}

	public void onInvokeTimeout(Invoke tcInvokeRequest) {
	}

	public void onDialogTimeout(Dialog d) {
		d.keepAlive();
	}

	public void onTCBegin(TCBeginIndication ind) {
	}

	public void onTCContinue(TCContinueIndication ind) {
		// send end
		TCEndRequest end = this.tcapProvider.getDialogPrimitiveFactory().createEnd(ind.getDialog());
		end.setTermination(TerminationType.Basic);
		try {
			ind.getDialog().send(end);
		} catch (TCAPSendException e) {
			throw new RuntimeException(e);
		}
	}

	public void onTCEnd(TCEndIndication ind) {
		// should not happen, in this scenario, we send data.
	}

	public void onTCUni(TCUniIndication ind) {
		// not going to happen
	}

	public void onTCPAbort(TCPAbortIndication ind) {
		// TODO Auto-generated method stub
	}

	public void onTCUserAbort(TCUserAbortIndication ind) {
		// TODO Auto-generated method stub
	}

	public void onTCNotice(TCNoticeIndication ind) {
		// TODO Auto-generated method stub

	}

	public static void main(String[] args) {

		try {
			ClientTest c = new ClientTest();
			c.sendInvoke();
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (TCAPException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (TCAPSendException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

		]]>
		</programlisting>
	</section>
</chapter>
